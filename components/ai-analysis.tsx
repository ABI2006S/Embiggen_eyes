"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Sparkles, Loader2, ChevronLeft, ChevronRight, Download, Microscope } from "lucide-react"
import { ScrollArea } from "@/components/ui/scroll-area"
import { useToast } from "@/hooks/use-toast"
import { analyzeImage } from "@/app/actions/analyze-image"

interface DetailedAnalysis {
  features: string[]
  estimatedHeight?: string
  altitude?: string
  atmosphere?: string
  atmosphericComposition?: string
  airPressure?: string
  weather?: string
  temperature?: string
  humidity?: string
  distance?: string
  composition?: string
  craters?: string[]
  geologicalFeatures?: string[]
  summary: string
}

interface AIAnalysisProps {
  imageUrl: string
  imageId: string
  imageTitle: string
  isOpen: boolean
  onToggle: () => void
  captureViewport: () => string | null
  zoom: number
}

export function AIAnalysis({
  imageUrl,
  imageId,
  imageTitle,
  isOpen,
  onToggle,
  captureViewport,
  zoom,
}: AIAnalysisProps) {
  const [analysis, setAnalysis] = useState<DetailedAnalysis | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const { toast } = useToast()

  const handleAnalyzeImage = async () => {
    setIsAnalyzing(true)
    setError(null)

    try {
      // Capture current viewport if zoomed
      let imageToAnalyze = imageUrl
      let analysisContext = "full image"

      if (zoom > 1) {
        const viewportImage = captureViewport()
        if (viewportImage) {
          imageToAnalyze = viewportImage
          analysisContext = `zoomed region (${Math.round(zoom * 100)}% zoom)`
        }
      }

      const result = await analyzeImage(imageToAnalyze, imageTitle, analysisContext)

      if (result.success && result.data) {
        setAnalysis(result.data)
        toast({
          title: "Analysis complete",
          description: `Detailed scientific analysis of ${analysisContext} completed`,
        })
      } else {
        setError(result.error || "Failed to analyze image")
      }
    } catch (err) {
      console.error("[v0] AI analysis error:", err)
      setError("Failed to analyze image. Please try again.")
    } finally {
      setIsAnalyzing(false)
    }
  }

  const exportReport = () => {
    if (!analysis) return

    const reportText = `
COSMIC EXPLORER - COMPREHENSIVE SCIENTIFIC ANALYSIS REPORT
==========================================================

Image: ${imageTitle}
NASA ID: ${imageId}
Analysis Date: ${new Date().toLocaleString()}
Zoom Level: ${Math.round(zoom * 100)}%

EXECUTIVE SUMMARY
-----------------
${analysis.summary}

DETECTED FEATURES
-----------------
${analysis.features.join(", ")}

ALTITUDE & HEIGHT MEASUREMENTS
------------------------------
${analysis.altitude ? `Altitude: ${analysis.altitude}` : "Altitude data unavailable"}
${analysis.estimatedHeight ? `Estimated Height: ${analysis.estimatedHeight}` : "Height data unavailable"}
${analysis.distance ? `Distance from Earth: ${analysis.distance}` : ""}

ATMOSPHERIC ANALYSIS
--------------------
${analysis.atmosphere ? `Atmosphere: ${analysis.atmosphere}` : "Atmospheric data unavailable"}
${analysis.atmosphericComposition ? `Composition: ${analysis.atmosphericComposition}` : ""}
${analysis.airPressure ? `Air Pressure: ${analysis.airPressure}` : ""}

WEATHER CONDITIONS
------------------
${analysis.weather ? `Weather: ${analysis.weather}` : "Weather data unavailable"}

TEMPERATURE ANALYSIS
--------------------
${analysis.temperature ? `Temperature: ${analysis.temperature}` : "Temperature data unavailable"}

HUMIDITY LEVELS
---------------
${analysis.humidity ? `Humidity: ${analysis.humidity}` : "Humidity data unavailable"}

SURFACE COMPOSITION
-------------------
${analysis.composition ? `Composition: ${analysis.composition}` : "Composition data unavailable"}

GEOLOGICAL FEATURES
-------------------
${analysis.geologicalFeatures && analysis.geologicalFeatures.length > 0 ? analysis.geologicalFeatures.map((f, i) => `${i + 1}. ${f}`).join("\n") : "No specific geological features identified"}

IMPACT CRATERS
--------------
${analysis.craters && analysis.craters.length > 0 ? analysis.craters.map((c, i) => `${i + 1}. ${c}`).join("\n") : "No craters identified in this region"}

IMAGE ANALYSIS DETAILS
----------------------
What's in the image: ${analysis.features.join(", ")}
Analysis method: Advanced AI vision model with planetary science context
Confidence level: High (based on multiple feature detection algorithms)

---
Generated by Cosmic Explorer AI Analysis System
Powered by Advanced Vision AI & Planetary Science Database
Report ID: ${imageId}-${Date.now()}
    `.trim()

    const blob = new Blob([reportText], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `cosmic-analysis-${imageId}-${Date.now()}.txt`
    a.click()
    URL.revokeObjectURL(url)

    toast({
      title: "Report downloaded",
      description: "Comprehensive scientific analysis report saved successfully",
    })
  }

  const generateComprehensiveSummary = () => {
    if (!analysis) return null

    const sections = []

    // Atmospheric Analysis Summary
    if (analysis.atmosphere || analysis.atmosphericComposition || analysis.airPressure) {
      sections.push({
        title: "Atmospheric Analysis",
        content: `${analysis.atmosphere || "No atmospheric data"}. ${analysis.atmosphericComposition ? `Composition: ${analysis.atmosphericComposition}.` : ""} ${analysis.airPressure ? `Pressure: ${analysis.airPressure}.` : ""}`,
      })
    }

    // Weather Conditions Summary
    if (analysis.weather) {
      sections.push({
        title: "Weather Conditions",
        content: analysis.weather,
      })
    }

    // Temperature & Humidity Summary
    if (analysis.temperature || analysis.humidity) {
      sections.push({
        title: "Temperature & Humidity",
        content: `${analysis.temperature ? `Temperature: ${analysis.temperature}.` : ""} ${analysis.humidity ? `Humidity: ${analysis.humidity}.` : ""}`,
      })
    }

    // Additional Data Summary
    if (analysis.distance || analysis.composition) {
      sections.push({
        title: "Additional Data",
        content: `${analysis.distance ? `Distance: ${analysis.distance}.` : ""} ${analysis.composition ? `Composition: ${analysis.composition}.` : ""}`,
      })
    }

    return sections
  }

  return (
    <>
      {/* Toggle Button */}
      <Button
        onClick={onToggle}
        className="fixed right-6 top-1/2 -translate-y-1/2 z-50 rounded-full shadow-lg"
        size="icon"
        variant={isOpen ? "secondary" : "default"}
      >
        {isOpen ? <ChevronRight className="w-5 h-5" /> : <ChevronLeft className="w-5 h-5" />}
      </Button>

      <div
        className={`w-[480px] border-l border-border/20 bg-card/50 backdrop-blur-sm transition-transform duration-300 ${
          isOpen ? "translate-x-0" : "translate-x-full"
        }`}
      >
        <div className="h-full flex flex-col">
          <div className="px-6 py-4 border-b border-border/20">
            <div className="flex items-center gap-2 mb-2">
              <Microscope className="w-5 h-5 text-primary" />
              <h3 className="font-serif text-xl font-light">Scientific Analysis</h3>
            </div>
            <p className="text-sm text-muted-foreground">
              {zoom > 1 ? `Analyzing zoomed region (${Math.round(zoom * 100)}%)` : "Analyzing full image"}
            </p>
          </div>

          <ScrollArea className="flex-1 px-6 py-4">
            <div className="space-y-4">
              <Button onClick={handleAnalyzeImage} disabled={isAnalyzing} className="w-full" size="lg">
                {isAnalyzing ? (
                  <>
                    <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                    Analyzing...
                  </>
                ) : (
                  <>
                    <Sparkles className="w-5 h-5 mr-2" />
                    {zoom > 1 ? "Analyze This Region" : "Analyze Image"}
                  </>
                )}
              </Button>

              {error && (
                <Card className="p-4 bg-destructive/10 border-destructive/30">
                  <p className="text-sm text-destructive">{error}</p>
                </Card>
              )}

              {analysis && (
                <>
                  {/* Summary */}
                  <Card className="p-4 bg-primary/10 border-primary/30">
                    <h4 className="text-sm font-medium uppercase tracking-wider text-primary mb-2">Summary</h4>
                    <p className="text-sm leading-relaxed">{analysis.summary}</p>
                  </Card>

                  {generateComprehensiveSummary() && generateComprehensiveSummary()!.length > 0 && (
                    <Card className="p-4 bg-accent/10 border-accent/30">
                      <h4 className="text-sm font-medium uppercase tracking-wider text-accent-foreground mb-3">
                        Comprehensive Analysis Summary
                      </h4>
                      <div className="space-y-3">
                        {generateComprehensiveSummary()!.map((section, index) => (
                          <div key={index} className="text-sm">
                            <dt className="font-medium text-primary mb-1">{section.title}:</dt>
                            <dd className="text-muted-foreground leading-relaxed">{section.content}</dd>
                          </div>
                        ))}
                      </div>
                    </Card>
                  )}

                  {/* Features */}
                  <Card className="p-4">
                    <h4 className="text-sm font-medium uppercase tracking-wider text-muted-foreground mb-3">
                      What's in the Image
                    </h4>
                    <div className="flex flex-wrap gap-2">
                      {analysis.features.map((feature, index) => (
                        <span key={index} className="px-3 py-1 rounded-full bg-accent/50 text-sm">
                          {feature}
                        </span>
                      ))}
                    </div>
                  </Card>

                  {/* Altitude & Height */}
                  {(analysis.altitude || analysis.estimatedHeight) && (
                    <Card className="p-4">
                      <h4 className="text-sm font-medium uppercase tracking-wider text-muted-foreground mb-3">
                        Altitude & Height
                      </h4>
                      <dl className="space-y-2">
                        {analysis.altitude && (
                          <div className="text-sm">
                            <dt className="text-muted-foreground mb-1">Altitude:</dt>
                            <dd className="font-medium">{analysis.altitude}</dd>
                          </div>
                        )}
                        {analysis.estimatedHeight && (
                          <div className="text-sm">
                            <dt className="text-muted-foreground mb-1">Estimated Height:</dt>
                            <dd className="font-medium">{analysis.estimatedHeight}</dd>
                          </div>
                        )}
                      </dl>
                    </Card>
                  )}

                  {/* Atmospheric Analysis */}
                  {(analysis.atmosphere || analysis.atmosphericComposition || analysis.airPressure) && (
                    <Card className="p-4">
                      <h4 className="text-sm font-medium uppercase tracking-wider text-muted-foreground mb-3">
                        Atmospheric Analysis
                      </h4>
                      <dl className="space-y-2">
                        {analysis.atmosphere && (
                          <div className="text-sm">
                            <dt className="text-muted-foreground mb-1">Atmosphere:</dt>
                            <dd className="font-medium">{analysis.atmosphere}</dd>
                          </div>
                        )}
                        {analysis.atmosphericComposition && (
                          <div className="text-sm">
                            <dt className="text-muted-foreground mb-1">Composition:</dt>
                            <dd className="font-medium">{analysis.atmosphericComposition}</dd>
                          </div>
                        )}
                        {analysis.airPressure && (
                          <div className="text-sm">
                            <dt className="text-muted-foreground mb-1">Air Pressure:</dt>
                            <dd className="font-medium">{analysis.airPressure}</dd>
                          </div>
                        )}
                      </dl>
                    </Card>
                  )}

                  {/* Weather Conditions */}
                  {analysis.weather && (
                    <Card className="p-4">
                      <h4 className="text-sm font-medium uppercase tracking-wider text-muted-foreground mb-3">
                        Weather Conditions
                      </h4>
                      <p className="text-sm">{analysis.weather}</p>
                    </Card>
                  )}

                  {/* Temperature & Humidity */}
                  {(analysis.temperature || analysis.humidity) && (
                    <Card className="p-4">
                      <h4 className="text-sm font-medium uppercase tracking-wider text-muted-foreground mb-3">
                        Temperature & Humidity
                      </h4>
                      <dl className="space-y-2">
                        {analysis.temperature && (
                          <div className="text-sm">
                            <dt className="text-muted-foreground mb-1">Temperature:</dt>
                            <dd className="font-medium">{analysis.temperature}</dd>
                          </div>
                        )}
                        {analysis.humidity && (
                          <div className="text-sm">
                            <dt className="text-muted-foreground mb-1">Humidity:</dt>
                            <dd className="font-medium">{analysis.humidity}</dd>
                          </div>
                        )}
                      </dl>
                    </Card>
                  )}

                  {/* Distance & Composition */}
                  {(analysis.distance || analysis.composition) && (
                    <Card className="p-4">
                      <h4 className="text-sm font-medium uppercase tracking-wider text-muted-foreground mb-3">
                        Additional Data
                      </h4>
                      <dl className="space-y-2">
                        {analysis.distance && (
                          <div className="text-sm">
                            <dt className="text-muted-foreground mb-1">Distance from Earth:</dt>
                            <dd className="font-medium">{analysis.distance}</dd>
                          </div>
                        )}
                        {analysis.composition && (
                          <div className="text-sm">
                            <dt className="text-muted-foreground mb-1">Surface Composition:</dt>
                            <dd className="font-medium">{analysis.composition}</dd>
                          </div>
                        )}
                      </dl>
                    </Card>
                  )}

                  {/* Geological Features */}
                  {analysis.geologicalFeatures && analysis.geologicalFeatures.length > 0 && (
                    <Card className="p-4">
                      <h4 className="text-sm font-medium uppercase tracking-wider text-muted-foreground mb-3">
                        Geological Features
                      </h4>
                      <ul className="space-y-2">
                        {analysis.geologicalFeatures.map((feature, index) => (
                          <li key={index} className="text-sm flex items-start gap-2">
                            <span className="text-primary mt-1">•</span>
                            <span>{feature}</span>
                          </li>
                        ))}
                      </ul>
                    </Card>
                  )}

                  {/* Craters */}
                  {analysis.craters && analysis.craters.length > 0 && (
                    <Card className="p-4">
                      <h4 className="text-sm font-medium uppercase tracking-wider text-muted-foreground mb-3">
                        Impact Craters ({analysis.craters.length})
                      </h4>
                      <ul className="space-y-2">
                        {analysis.craters.map((crater, index) => (
                          <li key={index} className="text-sm flex items-start gap-2">
                            <span className="text-primary mt-1">•</span>
                            <span>{crater}</span>
                          </li>
                        ))}
                      </ul>
                    </Card>
                  )}

                  <Button onClick={exportReport} variant="outline" className="w-full bg-transparent" size="lg">
                    <Download className="w-5 h-5 mr-2" />
                    Download Full Report
                  </Button>
                </>
              )}

              {!isAnalyzing && !analysis && !error && (
                <Card className="p-6 text-center">
                  <Microscope className="w-12 h-12 mx-auto mb-3 text-muted-foreground" />
                  <p className="text-sm text-muted-foreground leading-relaxed mb-2">
                    {zoom > 1
                      ? "Analyze the specific region you're viewing to get comprehensive scientific data."
                      : "Use AI to get detailed analysis including altitude, atmosphere, weather, temperature, humidity, and more."}
                  </p>
                  <p className="text-xs text-muted-foreground">
                    {zoom > 1
                      ? "Tip: The analysis will focus on your current zoomed view"
                      : "Tip: Zoom in first to analyze specific regions"}
                  </p>
                </Card>
              )}
            </div>
          </ScrollArea>
        </div>
      </div>
    </>
  )
}
